# Copyright (C) 2023 Frank Roth <developer@freakydude.de>

# Basic implementation of the gcodes needed by 
# BigTreeTech-TouchscreenFirmware (https://github.com/bigtreetech/BIGTREETECH-TouchScreenFirmware)
# Used in Touch Mode

[gcode_macro M73]
rename_existing: M73.1
gcode: 
  {% set PROGRESS = params.P | default(0.0) | float  %}
  {% set MINUTES = params.R | default(0.0) | float  %}

  {% set h = ((MINUTES // 60))   | int %}
  {% set m = (MINUTES-(h*60)) | int %}
  {% set s = ((MINUTES-(h*60)-m)*60) | int %}

  _BTT_NOTIFY_TIMELEFT TIMELEFT="{h~"h"~m~"m"~s~"s"}"

  M73.1 {rawparams}

[gcode_macro M81]
description: Power Off
gcode:
  M117 M81 Shutdown: {params}
  TURN_OFF_HEATERS
  M84
  
#[gcode_macro M92]
#description: Set Axis Steps-per-unit
#  Use M92 to set the steps-per-unit for one or more axes. This setting affects how many steps will be done for each unit of movement.
#gcode:
#  M117 NotImplemented - M92 Set Axis Steps-per-unit: {params}

[gcode_macro M112]
description: Emergency Stop
rename_existing: M112.1
gcode:
  _SEND_TO_BTT MESSAGE="Emergency Stop"
  M112.1 {rawparams}
  FIRMWARE_RESTART

[gcode_macro M115]
description: Firmware Info
rename_existing: M115.1
gcode:
  M115.1 {rawparams}

[gcode_macro M118]
description: Serial print and parse BTT TouchScreenFirmware
  Send a message to the connected host for display in the host console or to perform a host action.
rename_existing: M118.1
gcode:
  {% set P = params.P | default(0) | int  %}
  {% set A = params.A | default(0) | int  %}
  {% set ACTION = params.ACTION | string  %}
  {% set NOTIFICATION = params.NOTIFICATION | string  %}
  {% set REMOTE = params.REMOTE | string  %}
  {% set PAUSE = params.PAUSE | string  %}
  {% set RESUME = params.RESUME | string  %}
  {% set CANCEL = params.CANCEL | string  %}

  {% if A == 1 and params.ACTION is defined and params.NOTIFICATION is defined and params.REMOTE is defined %}    
    {% if params.PAUSE is defined %}
      PAUSE
    {% endif %}
    {% if params.RESUME is defined %}
      RESUME
    {% endif %}
    {% if params.CANCEL is defined %}
      CANCEL_PRINT
    {% endif %}  
  {% else %}
    M118.1 {rawparams}
  {% endif %}

[gcode_macro M150]
description: Set RGB(W) Color
  If you have an RGB(W) light, either as part of a controller or installed separately, the M150 command can be used to set its color.
gcode:
  {% set INDEX = params.I | default(0)| int  %}
  {% set STRIPE = params.S | default(0)| int  %}
  {% set KEEP = params.K | default(0)| int  %}
  {% set RED = params.R | default(0)| int  %}
  {% set GREEN = params.U | default(0)| int  %}
  {% set BLUE = params.B | default(0)| int  %}
  {% set WHITE = params.W | default(0)| int  %}
  {% set BRIGHTNESS = params.I | default(255)| int  %}
  
  SET_LED LED=extruder RED={(RED+1)/256} GREEN={(GREEN+1)/256} BLUE={(BLUE+1)/256} WHITE={(WHITE+1)/256} TRANSMIT=1 SYNC=1 # [INDEX=<index>] 

#[gcode_macro M206]
#description: Set Home Offsets
#  Use M206 to apply a persistent offset to the native home position and coordinate space. 
#  This effectively shifts the coordinate space in the negative direction.
#gcode:
## M206 [P<offset>] [T<offset>] [X<offset>] [Y<offset>] [Z<offset>]
#  M117 NotImplemented - M206 - Set Home Offsets: {params}

#[gcode_macro M211]
#description: Software Endstops
#  Optionally enable/disable software endstops, then report the current state.
#  With software endstops enabled, moves will be clipped to the physical boundaries from [XYZ]_MIN_POS to [XYZ]_MAX_POS.
#gcode:
## [S<flag>] Software endstops state (S1=enable S0=disable)
#  M117 NotImplemented - M211 - Software Endstops: {params}

[gcode_macro M290]
description: Babystep
  Apply babysteps to one or more axes using current units. 
  Offsets applied with M290 arenâ€™t added to the current coordinates, but are intended for making small adjustments, 
  especially in the Z axis, at the start of a print.
gcode:
  {% set X = params.X | default(0)| float %}
  {% set Y = params.Y | default(0)| float %}
  {% set Z = params.Z | default(0)| float %}

  SET_GCODE_OFFSET X_ADJUST={X} Y_ADJUST={Y} Z_ADJUST={Z} MOVE=1

[gcode_macro M303]
description: PID autotune
  This command initiates a process of heating and cooling to determine the proper PID values for the specified hotend or the heated bed.
gcode:
  {% set INDEX = params.E | default(0)| int  %}
  {% set COUNT = params.C | default(0)| int  %}
  {% set SAVE = params.U | default(0)| int  %}
  {% set TARGETTEMP = params.S | default(0)| float %}

  {% set HEATER = "extruder" %}
  {% if INDEX == -1 %}
    {% set HEATER = "heater_bed" %}
  {% endif %}

  PID_CALIBRATE HEATER={HEATER} TARGET={TARGETTEMP}

  {% if SAVE == 1 %}
    SAVE_CONFIG
  {% endif %}

[gcode_macro M420]
description: Bed Leveling State
  Get and/or set bed leveling state. For mesh-based leveling systems use Z parameter to set the Z Fade Height.
  With AUTO_BED_LEVELING_UBL you can use L to load a mesh from EEPROM.
gcode:
  {% set S = params.S | default(0)| int  %}

  {% if S == 1 %}
    BED_MESH_PROFILE LOAD=default
  {% else %}
    BED_MESH_CLEAR
  {% endif %}

[gcode_macro M500]
description: Save EEPROM Settings
  Save all configurable settings to EEPROM.
gcode:

  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT MESSAGE="Settings not saved - is printing"
  {% else %}  
    SAVE_CONFIG
  {% endif %}

[gcode_macro M501]
description: Restore EEPROM Settings
  Load all saved settings from EEPROM.
gcode:
  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT MESSAGE="Settings not restored - is printing"
  {% else %}  
    RESTART
  {% endif %}

[gcode_macro M502]
description: Factory EEPROM Reset
  Reset all configurable settings to their factory defaults.
  To also reset settings in EEPROM, follow with M500.
gcode:
  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT MESSAGE="Settings not reset - is printing"
  {% else %}  
    FIRMWARE_RESTART
  {% endif %}

#[gcode_macro M503]
#description: Report Settings
#  Print a concise report of all runtime-configurable settings (in SRAM) to the host console. 
#  This command reports the active settings which may or may not be the same as those stored in the EEPROM.
#gcode:
#  {% set SAVE = params.C | default(0)| int %}
#  {% set DETAILED = params.S | default(0)| int %}
#  M117 NotImplemented - M503 Report Settings: {params}

[gcode_macro M701]
description: Load filament  
gcode:
  {% set LENGTH = params.L | default(25)| float %}
  {% set EXTRUDER = params.T | default(0)| float %}
  {% set ZMOVE = params.Z | default(0)| float %}

  SAVE_GCODE_STATE NAME=M701_STATE

  G91 # Relative Positioning
  G92 E0 ; Reset Extruder
  G1 F300.0 Z{ZMOVE} E{LENGTH} ; Extrude
  G92 E0 ; Reset Extruder

  RESTORE_GCODE_STATE NAME=M701_STATE

[gcode_macro M702]
description: Unload filament  
gcode:
  {% set LENGTH = params.U | default(25)| float %}
  {% set EXTRUDER = params.T | default(0)| float %}
  {% set ZMOVE = params.Z | default(0)| float %}

  SAVE_GCODE_STATE NAME=M702_STATE

  G91 # Relative Positioning
  G92 E0 ; Reset Extruder
  G1 F300.0 Z{ZMOVE} E{(-1*LENGTH)} ; Retract
  G92 E0 ; Reset Extruder

  RESTORE_GCODE_STATE NAME=M702_STATE


[gcode_macro M851]
description: XYZ Probe Offset
  Set the XYZ distance from the nozzle to the probe trigger-point.
gcode:
  {% set X = params.X | default(0)| float %}
  {% set Y = params.Y | default(0)| float %}
  {% set Z = params.Z | default(0)| float %}

  {% if 'X' in params %}
    SET_GCODE_OFFSET X={X} MOVE=1
  {% endif %}
  {% if 'Y' in params %}
    SET_GCODE_OFFSET Y={Y} MOVE=1
  {% endif %}
  {% if 'Z' in params %}
    SET_GCODE_OFFSET Z={Z} MOVE=1
  {% endif %}

[gcode_macro _SEND_TO_BTT]
description: Sends action or message to the BigTreeTech TouchScreenFirmware
  Use parameter ACTION to send an action  
  Use paremter MESSAGE to send a user message
gcode:
  {% set ACTION = params.ACTION | default("")| string  %}
  {% set MESSAGE = params.MESSAGE |  default("")| string  %}

  {% if ACTION != "" %}
    RESPOND PREFIX="{"//action:" + ACTION}"
  {% endif %}
  {% if MESSAGE != "" %}
    RESPOND TYPE=echo MSG="{MESSAGE}"
  {% endif %}  

[gcode_macro _BTT_START]
gcode:
  _SEND_TO_BTT ACTION="print_start"

[gcode_macro _BTT_END]
gcode:
  _SEND_TO_BTT ACTION="print_end"

[gcode_macro _BTT_CANCEL]
gcode:
  _SEND_TO_BTT ACTION="cancel"

[gcode_macro _BTT_PAUSE]
gcode:
  _SEND_TO_BTT ACTION="pause"

[gcode_macro _BTT_RESUME]
gcode:
  _SEND_TO_BTT ACTION="resume"

[gcode_macro _BTT_NOTIFY_TIMELEFT]
gcode:
  {% set TIMELEFT = params.TIMELEFT | default("00h00m00s") | string  %}
  _SEND_TO_BTT ACTION="{"notification Time Left " ~ TIMELEFT}"

[gcode_macro _BTT_NOTIFY_LAYERLEFT]
gcode:
  {% set CURRENT_LAYER = params.CURRENT | default(0) | int  %}
  {% set MAX_LAYER = params.MAX | default(0) | int  %}
  _SEND_TO_BTT ACTION="{"notification Layer Left " ~ CURRENT_LAYER ~ "/" ~ MAX_LAYER}"

[gcode_macro _BTT_NOTIFY_DATALEFT]
gcode:
  {% set CURRENT_DATA = params.CURRENT | default(0) | int  %}
  {% set MAX_DATA = params.MAX | default(0) | int  %}

  _SEND_TO_BTT ACTION="{"notification Data Left " ~ CURRENT_DATA ~ "/" ~ MAX_DATA}"

[delayed_gcode _RESET_BTT]
initial_duration: 1.0
gcode:
  _BTT_END
  _SEND_TO_BTT MESSAGE="Klipper restarted"